#!/usr/bin/env python3
"""
Script pour forcer la r√©initialisation compl√®te de la base de donn√©es sur Render
ATTENTION: Ce script supprime toutes les donn√©es existantes!
"""

import os
import sys
from datetime import datetime

# Ajouter le r√©pertoire courant au path pour importer app
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from app import app, db, User, Site, TypeReleve, TypeReleve, FormulaireRoutine, EmailConfig
    from werkzeug.security import generate_password_hash
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

def reset_database():
    """R√©initialisation compl√®te de la base de donn√©es"""
    print("üö® R√âINITIALISATION COMPL√àTE DE LA BASE DE DONN√âES")
    print("=" * 60)
    print("‚ö†Ô∏è  ATTENTION: Toutes les donn√©es existantes seront supprim√©es!")
    print("=" * 60)
    
    with app.app_context():
        try:
            # 1. Supprimer toutes les tables existantes
            print("\n1Ô∏è‚É£ SUPPRESSION DES TABLES EXISTANTES")
            print("-" * 40)
            
            db.drop_all()
            print("‚úÖ Toutes les tables supprim√©es")
            
            # 2. Recr√©er toutes les tables
            print("\n2Ô∏è‚É£ CR√âATION DES NOUVELLES TABLES")
            print("-" * 40)
            
            db.create_all()
            print("‚úÖ Toutes les tables recr√©√©es")
            
            # 3. Cr√©er les sites
            print("\n3Ô∏è‚É£ CR√âATION DES SITES")
            print("-" * 40)
            
            smp = Site(nom='SMP', description='Station de traitement des eaux SMP')
            lpz = Site(nom='LPZ', description='Station de traitement des eaux LPZ')
            db.session.add(smp)
            db.session.add(lpz)
            db.session.commit()
            print("‚úÖ Sites SMP et LPZ cr√©√©s")
            
            # 4. Cr√©er les types de relev√©s pour SMP
            print("\n4Ô∏è‚É£ CR√âATION DES TYPES DE RELEV√âS SMP")
            print("-" * 40)
            
            types_smp = [
                ('Exhaure 1', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Exhaure 2', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Exhaure 3', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Exhaure 4', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Retour dessableur', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Retour Orage', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Rejet √† l\'Arc', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Surpresseur 4 pompes', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Surpresseur 7 pompes', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Entr√©e STE CAB', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Alimentation CAB', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Eau potable', 'totalisateur', 'm¬≥', 'hebdomadaire', 'lundi'),
                ('Forage', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Boue STE', 'basique', 'press√©es', 'quotidien'),
                ('Boue STE CAB', 'basique', 'press√©es', 'quotidien'),
                ('pH entr√©e', 'basique', '', 'quotidien'),
                ('pH sortie', 'basique', '', 'quotidien'),
                ('Temp√©rature entr√©e', 'basique', '¬∞C', 'quotidien'),
                ('Temp√©rature sortie', 'basique', '¬∞C', 'quotidien'),
                ('Conductivit√© sortie', 'basique', '¬µS/cm', 'quotidien'),
                ('MES entr√©e', 'basique', 'mg/L', 'quotidien'),
                ('MES sortie', 'basique', 'mg/L', 'quotidien'),
                ('Coagulant', 'basique', 'L', 'hebdomadaire', 'lundi'),
                ('Floculant', 'basique', 'kg', 'quotidien'),
                ('CO2', 'basique', '%', 'quotidien')
            ]
            
            for nom, type_mesure, unite, frequence, *args in types_smp:
                jour_specifique = args[0] if args else None
                tr = TypeReleve()
                tr.nom = nom
                tr.site_id = smp.id
                tr.type_mesure = type_mesure
                tr.unite = unite
                tr.frequence = frequence
                tr.jour_specifique = jour_specifique
                db.session.add(tr)
            
            print(f"‚úÖ {len(types_smp)} types de relev√©s SMP cr√©√©s")
            
            # 5. Cr√©er les types de relev√©s pour LPZ
            print("\n5Ô∏è‚É£ CR√âATION DES TYPES DE RELEV√âS LPZ")
            print("-" * 40)
            
            types_lpz = [
                ('Exhaure 1', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Exhaure 2', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Retour dessableur', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Surpresseur BP', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Surpresseur HP', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Rejet √† l\'Arc', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Entr√©e STE CAB', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Alimentation CAB', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Eau de montagne', 'totalisateur', 'm¬≥', 'quotidien'),
                ('Eau potable', 'totalisateur', 'm¬≥', 'hebdomadaire', 'lundi'),
                ('Boue STE', 'basique', 'press√©es', 'quotidien'),
                ('Boue STE CAB', 'basique', 'press√©es', 'quotidien'),
                ('pH entr√©e', 'basique', '', 'quotidien'),
                ('pH sortie', 'basique', '', 'quotidien'),
                ('Temp√©rature entr√©e', 'basique', '¬∞C', 'quotidien'),
                ('Temp√©rature sortie', 'basique', '¬∞C', 'quotidien'),
                ('Conductivit√© sortie', 'basique', '¬µS/cm', 'quotidien'),
                ('MES entr√©e', 'basique', 'mg/L', 'quotidien'),
                ('MES sortie', 'basique', 'mg/L', 'quotidien'),
                ('Coagulant', 'basique', 'L', 'hebdomadaire', 'lundi'),
                ('Floculant', 'basique', 'kg', 'quotidien'),
                ('CO2', 'basique', '%', 'quotidien')
            ]
            
            for nom, type_mesure, unite, frequence, *args in types_lpz:
                jour_specifique = args[0] if args else None
                tr = TypeReleve()
                tr.nom = nom
                tr.site_id = lpz.id
                tr.type_mesure = type_mesure
                tr.unite = unite
                tr.frequence = frequence
                tr.jour_specifique = jour_specifique
                db.session.add(tr)
            
            print(f"‚úÖ {len(types_lpz)} types de relev√©s LPZ cr√©√©s")
            
            # 6. Cr√©er l'utilisateur admin
            print("\n6Ô∏è‚É£ CR√âATION DE L'UTILISATEUR ADMIN")
            print("-" * 40)
            
            admin = User()
            admin.username = 'admin'
            admin.password_hash = generate_password_hash('admin123')
            admin.role = 'admin'
            db.session.add(admin)
            
            print("‚úÖ Utilisateur admin cr√©√©")
            print("   Username: admin")
            print("   Password: admin123")
            print("   Role: admin")
            
            # 7. Cr√©er les formulaires de routines
            print("\n7Ô∏è‚É£ CR√âATION DES FORMULAIRES DE ROUTINES")
            print("-" * 40)
            
            formulaires_routines = [
                'STE PRINCIPALE LPZ', 'STE CAB LPZ', 'STEP LPZ', 
                'STE PRINCIPALE SMP', 'STE CAB SMP', 'STEP SMP'
            ]
            
            for nom in formulaires_routines:
                formulaire = FormulaireRoutine()
                formulaire.nom = nom
                db.session.add(formulaire)
            
            print(f"‚úÖ {len(formulaires_routines)} formulaires de routines cr√©√©s")
            
            # 8. Cr√©er la configuration email
            print("\n8Ô∏è‚É£ CR√âATION DE LA CONFIGURATION EMAIL")
            print("-" * 40)
            
            email_config = EmailConfig()
            email_config.email_address = 'admin@ste-releve.com'
            email_config.smtp_server = 'smtp.gmail.com'
            email_config.smtp_port = 587
            db.session.add(email_config)
            
            print("‚úÖ Configuration email cr√©√©e")
            
            # 9. Valider toutes les modifications
            print("\n9Ô∏è‚É£ VALIDATION DES MODIFICATIONS")
            print("-" * 40)
            
            db.session.commit()
            print("‚úÖ Toutes les modifications valid√©es")
            
            # 10. V√©rification finale
            print("\nüîü V√âRIFICATION FINALE")
            print("-" * 40)
            
            users_count = User.query.count()
            sites_count = Site.query.count()
            types_count = TypeReleve.query.count()
            formulaires_count = FormulaireRoutine.query.count()
            
            print(f"‚úÖ {users_count} utilisateurs cr√©√©s")
            print(f"‚úÖ {sites_count} sites cr√©√©s")
            print(f"‚úÖ {types_count} types de relev√©s cr√©√©s")
            print(f"‚úÖ {formulaires_count} formulaires cr√©√©s")
            
            print("\n" + "=" * 60)
            print("üéâ R√âINITIALISATION TERMIN√âE AVEC SUCC√àS!")
            print("=" * 60)
            print("üîë Vous pouvez maintenant vous connecter avec:")
            print("   Username: admin")
            print("   Password: admin123")
            
        except Exception as e:
            print(f"‚ùå ERREUR lors de la r√©initialisation: {e}")
            db.session.rollback()
            raise

if __name__ == '__main__':
    reset_database() 